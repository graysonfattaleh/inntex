// <auto-generated />
using System;
using BurialSite.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BurialSite.Migrations
{
    [DbContext(typeof(ArcDBContext))]
    [Migration("20210409151909_fixbool")]
    partial class fixbool
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BurialFileUrl", b =>
                {
                    b.Property<int>("BurialID")
                        .HasColumnType("integer");

                    b.Property<int>("FileUrlId")
                        .HasColumnType("integer");

                    b.HasKey("BurialID", "FileUrlId");

                    b.HasIndex("FileUrlId");

                    b.ToTable("BurialFileUrl");
                });

            modelBuilder.Entity("BurialLocationYearsExcavatedFrom", b =>
                {
                    b.Property<int>("BurialLocationBurLocID")
                        .HasColumnType("integer");

                    b.Property<int>("YearsExcavatedFromsYearsExcavatedFromId")
                        .HasColumnType("integer");

                    b.HasKey("BurialLocationBurLocID", "YearsExcavatedFromsYearsExcavatedFromId");

                    b.HasIndex("YearsExcavatedFromsYearsExcavatedFromId");

                    b.ToTable("BurialLocationYearsExcavatedFrom");
                });

            modelBuilder.Entity("BurialSite.Models.Burial", b =>
                {
                    b.Property<int>("BurialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<decimal?>("Age_At_Death")
                        .HasColumnType("numeric");

                    b.Property<char?>("Age_Code")
                        .HasColumnType("character(1)");

                    b.Property<string>("Age_Method")
                        .HasColumnType("text");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Artifact_Description")
                        .HasColumnType("text");

                    b.Property<bool?>("Artifact_Found")
                        .HasColumnType("boolean");

                    b.Property<string>("Artifacts_Description")
                        .HasColumnType("text");

                    b.Property<bool?>("Artifacts_Found")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BYU_Sample")
                        .HasColumnType("boolean");

                    b.Property<int?>("Bag")
                        .HasColumnType("integer");

                    b.Property<string>("Basilar_Suture")
                        .HasColumnType("text");

                    b.Property<decimal?>("Basion_Bregma_Height")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Basion_Nasion")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Basion_Prosthion_Length")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Bizygomatic_Diameter")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Body_Analysis")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Bone_Taken")
                        .HasColumnType("boolean");

                    b.Property<int>("BurLocID")
                        .HasColumnType("integer");

                    b.Property<int>("BurialLocationBurLocID")
                        .HasColumnType("integer");

                    b.Property<long>("BurialLocationId")
                        .HasColumnType("bigint");

                    b.Property<char?>("Burial_Adult_Child")
                        .HasColumnType("character(1)");

                    b.Property<string>("Burial_Description")
                        .HasColumnType("text");

                    b.Property<string>("Burial_Icon")
                        .HasColumnType("text");

                    b.Property<string>("Burial_Icon2")
                        .HasColumnType("text");

                    b.Property<int>("Burial_Number")
                        .HasColumnType("integer");

                    b.Property<string>("Burial_Preservation")
                        .HasColumnType("text");

                    b.Property<bool?>("Burial_Sample_Taken")
                        .HasColumnType("boolean");

                    b.Property<string>("Burial_Situation")
                        .HasColumnType("text");

                    b.Property<char?>("Burial_Wrapping")
                        .HasColumnType("character(1)");

                    b.Property<bool?>("Button_Osteoma")
                        .HasColumnType("boolean");

                    b.Property<int?>("C14_Calendar_Date")
                        .HasColumnType("integer");

                    b.Property<int?>("C14_Sample")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrated_95_Calendar_Date_Avg")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrated_95_Calendar_Date_Max")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrated_95_Calendar_Date_Min")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrated_95_Calendar_Date_Span")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Cluster")
                        .HasColumnType("text");

                    b.Property<int?>("Conventional_14C_Age_BP")
                        .HasColumnType("integer");

                    b.Property<int?>("Cranial_Sample_Number")
                        .HasColumnType("integer");

                    b.Property<string>("Cranial_Suture")
                        .HasColumnType("text");

                    b.Property<bool?>("Cribra_Orbitala")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Date_Excavated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Day_On_Skull")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("numeric");

                    b.Property<string>("Description_Of_Taken")
                        .HasColumnType("text");

                    b.Property<int?>("Dorsal_Pitting")
                        .HasColumnType("integer");

                    b.Property<decimal?>("East_To_Feet")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("East_To_Head")
                        .HasColumnType("numeric");

                    b.Property<string>("Epiphyseal_Union")
                        .HasColumnType("text");

                    b.Property<decimal?>("Estimate_Living_Stature")
                        .HasColumnType("numeric");

                    b.Property<bool?>("Face_Bundle")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Femur_Head")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Femur_Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Field_Book")
                        .HasColumnType("text");

                    b.Property<int?>("Field_Book_Page_Number")
                        .HasColumnType("integer");

                    b.Property<int?>("Foci")
                        .HasColumnType("integer");

                    b.Property<decimal?>("GE_Function_Total")
                        .HasColumnType("numeric");

                    b.Property<int?>("Gamous")
                        .HasColumnType("integer");

                    b.Property<char?>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<char?>("Gender_By_Measurement")
                        .HasColumnType("character(1)");

                    b.Property<int?>("Gonian")
                        .HasColumnType("integer");

                    b.Property<string>("Goods")
                        .HasColumnType("text");

                    b.Property<string>("Hair_Color")
                        .HasColumnType("text");

                    b.Property<bool?>("Hair_Taken")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Head_Direction")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Humerus_Head")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Humerus_Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<string>("Initials_Of_Data_Entry_Checker")
                        .HasColumnType("text");

                    b.Property<string>("Initials_Of_Data_Entry_Expert")
                        .HasColumnType("text");

                    b.Property<decimal?>("Interorbital_Breadth")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Length_In_Centimeters")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Length_In_Meters")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Length_In_Millimeters")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Length_Of_Remains")
                        .HasColumnType("numeric");

                    b.Property<bool?>("Linear_Hypoplasia_Enamel")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<decimal?>("Maximum_Cranial_Breadth")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Maximum_Cranial_Length")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Maximum_Nasal_Breadth")
                        .HasColumnType("numeric");

                    b.Property<int?>("Medial_IP_Ramus")
                        .HasColumnType("integer");

                    b.Property<bool?>("Metopic_Suture")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Month_On_Skull")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Nasion_Prosthion")
                        .HasColumnType("numeric");

                    b.Property<int?>("Nuchal_Crest")
                        .HasColumnType("integer");

                    b.Property<int?>("Orbit_Edge")
                        .HasColumnType("integer");

                    b.Property<string>("Osteology_Unknown_Comment")
                        .HasColumnType("text");

                    b.Property<string>("Osteophytosis")
                        .HasColumnType("text");

                    b.Property<int?>("Parietal_Bossing")
                        .HasColumnType("integer");

                    b.Property<string>("Pathology_Anomalies")
                        .HasColumnType("text");

                    b.Property<string>("Porotic_Hyperostosis")
                        .HasColumnType("text");

                    b.Property<string>("Porotic_Hyperostosis_Locations")
                        .HasColumnType("text");

                    b.Property<bool?>("Postcrania_At_Magazine")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Postcrania_Trauma")
                        .HasColumnType("boolean");

                    b.Property<int?>("Preaur_Sulcus")
                        .HasColumnType("integer");

                    b.Property<int?>("Preservation_Index")
                        .HasColumnType("integer");

                    b.Property<string>("Preservation_State")
                        .HasColumnType("text");

                    b.Property<bool?>("Previously_Sampled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Pubic_Bone")
                        .HasColumnType("integer");

                    b.Property<string>("Pubic_Symphysis")
                        .HasColumnType("text");

                    b.Property<string>("Questions")
                        .HasColumnType("text");

                    b.Property<string>("Rack_And_Shelf")
                        .HasColumnType("text");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int?>("Robust")
                        .HasColumnType("integer");

                    b.Property<bool?>("Sample_Collected")
                        .HasColumnType("boolean");

                    b.Property<int?>("Sciatic_Notch")
                        .HasColumnType("integer");

                    b.Property<char?>("Sex")
                        .HasColumnType("character(1)");

                    b.Property<string>("Sex_Method")
                        .HasColumnType("text");

                    b.Property<bool?>("Skull_At_Magazine")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Skull_Trauma")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Soft_Tissue_Taken")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("South_To_Feet")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("South_To_Head")
                        .HasColumnType("numeric");

                    b.Property<int?>("Subpubic_Angle")
                        .HasColumnType("integer");

                    b.Property<int?>("Supraorbital_Ridges")
                        .HasColumnType("integer");

                    b.Property<bool?>("Temporal_Mandibular_Joint_Osteoarthritis")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Textile_Taken")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Tibia_Length")
                        .HasColumnType("numeric");

                    b.Property<int?>("Tomb")
                        .HasColumnType("integer");

                    b.Property<int?>("Tooth_Attrition")
                        .HasColumnType("integer");

                    b.Property<string>("Tooth_Eruption")
                        .HasColumnType("text");

                    b.Property<bool?>("Tooth_Taken")
                        .HasColumnType("boolean");

                    b.Property<int?>("Tube_Number")
                        .HasColumnType("integer");

                    b.Property<int?>("Ventral_Arc")
                        .HasColumnType("integer");

                    b.Property<decimal?>("West_To_Feet")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("West_To_Head")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Year_On_Skull")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Zygomatic_Crest")
                        .HasColumnType("integer");

                    b.HasKey("BurialID");

                    b.HasIndex("BurialLocationBurLocID");

                    b.ToTable("Burials");
                });

            modelBuilder.Entity("BurialSite.Models.BurialLocation", b =>
                {
                    b.Property<int>("BurLocID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Dig_Site_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("E_W_Grid_Site_Lower")
                        .HasColumnType("integer");

                    b.Property<int?>("E_W_Grid_Site_Upper")
                        .HasColumnType("integer");

                    b.Property<int?>("N_S_Grid_Site_Lower")
                        .HasColumnType("integer");

                    b.Property<int?>("N_S_Grid_Site_Upper")
                        .HasColumnType("integer");

                    b.HasKey("BurLocID");

                    b.ToTable("BurialLocations");
                });

            modelBuilder.Entity("BurialSite.Models.FileUrl", b =>
                {
                    b.Property<int>("FileUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("FileUrlId");

                    b.ToTable("FileUrls");
                });

            modelBuilder.Entity("BurialSite.Models.Notes", b =>
                {
                    b.Property<int>("NotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BurialID")
                        .HasColumnType("bigint");

                    b.Property<int?>("BurialID1")
                        .HasColumnType("integer");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("NotesId");

                    b.HasIndex("BurialID1");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("BurialSite.Models.OneToOneField", b =>
                {
                    b.Property<int>("OneToOneFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("OneToOneFieldId");

                    b.ToTable("OneToOneFields");
                });

            modelBuilder.Entity("BurialSite.Models.OneToOneValue", b =>
                {
                    b.Property<int>("OneToneValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BurialId")
                        .HasColumnType("integer");

                    b.Property<int>("OneToOneFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("OneToneValueId");

                    b.HasIndex("BurialId");

                    b.HasIndex("OneToOneFieldId");

                    b.ToTable("OneToOneValues");
                });

            modelBuilder.Entity("BurialSite.Models.TestEnt", b =>
                {
                    b.Property<int>("TestEntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("test_string")
                        .HasColumnType("text");

                    b.HasKey("TestEntId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("BurialSite.Models.YearsExcavatedFrom", b =>
                {
                    b.Property<int>("YearsExcavatedFromId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("YearsExcavatedFromId");

                    b.ToTable("YearsExcavatedFrom");
                });

            modelBuilder.Entity("BurialFileUrl", b =>
                {
                    b.HasOne("BurialSite.Models.Burial", null)
                        .WithMany()
                        .HasForeignKey("BurialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurialSite.Models.FileUrl", null)
                        .WithMany()
                        .HasForeignKey("FileUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BurialLocationYearsExcavatedFrom", b =>
                {
                    b.HasOne("BurialSite.Models.BurialLocation", null)
                        .WithMany()
                        .HasForeignKey("BurialLocationBurLocID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurialSite.Models.YearsExcavatedFrom", null)
                        .WithMany()
                        .HasForeignKey("YearsExcavatedFromsYearsExcavatedFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BurialSite.Models.Burial", b =>
                {
                    b.HasOne("BurialSite.Models.BurialLocation", "BurialLocation")
                        .WithMany("Burials")
                        .HasForeignKey("BurialLocationBurLocID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BurialLocation");
                });

            modelBuilder.Entity("BurialSite.Models.Notes", b =>
                {
                    b.HasOne("BurialSite.Models.Burial", "Burial")
                        .WithMany("Notes")
                        .HasForeignKey("BurialID1");

                    b.Navigation("Burial");
                });

            modelBuilder.Entity("BurialSite.Models.OneToOneValue", b =>
                {
                    b.HasOne("BurialSite.Models.Burial", "Burial")
                        .WithMany("OneToOneValues")
                        .HasForeignKey("BurialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurialSite.Models.OneToOneField", "OneToOneField")
                        .WithMany("OneToOneValue")
                        .HasForeignKey("OneToOneFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burial");

                    b.Navigation("OneToOneField");
                });

            modelBuilder.Entity("BurialSite.Models.Burial", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("OneToOneValues");
                });

            modelBuilder.Entity("BurialSite.Models.BurialLocation", b =>
                {
                    b.Navigation("Burials");
                });

            modelBuilder.Entity("BurialSite.Models.OneToOneField", b =>
                {
                    b.Navigation("OneToOneValue");
                });
#pragma warning restore 612, 618
        }
    }
}
